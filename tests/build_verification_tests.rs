// Build Verification Tests for googleads-rs
//
// These tests verify that critical types are generated and compile successfully.
// They ensure gRPC service clients and protobuf types are correctly generated by tonic_build.

#![allow(dead_code)]
#![allow(unused_variables)]

// ============================================================================
// Test 1.1: Service Clients Generated
// ============================================================================

#[test]
fn test_google_ads_service_client_exists() {
    use googleads_rs::google::ads::googleads::v22::services::google_ads_service_client::GoogleAdsServiceClient;

    // This test passes if the type exists and compiles
    // We're not instantiating it, just verifying the type is available
    let _type_check: Option<GoogleAdsServiceClient<tonic::transport::Channel>> = None;
}

#[test]
fn test_other_service_clients_exist() {
    use googleads_rs::google::ads::googleads::v22::services::{
        ad_group_service_client::AdGroupServiceClient,
        campaign_service_client::CampaignServiceClient,
        customer_service_client::CustomerServiceClient,
    };

    // Verify other commonly used service clients compile
    let _: Option<CustomerServiceClient<tonic::transport::Channel>> = None;
    let _: Option<CampaignServiceClient<tonic::transport::Channel>> = None;
    let _: Option<AdGroupServiceClient<tonic::transport::Channel>> = None;
}

// ============================================================================
// Test 1.2: Core Resource Types Generated
// ============================================================================

#[test]
fn test_core_resource_types_exist() {
    use googleads_rs::google::ads::googleads::v22::resources::{
        AdGroup, AdGroupAd, AdGroupCriterion, Campaign, Customer,
    };

    // Verify we can construct these types
    let _campaign = Campaign::default();
    let _ad_group = AdGroup::default();
    let _customer = Customer::default();
    let _ad = AdGroupAd::default();
    let _criterion = AdGroupCriterion::default();
}

#[test]
fn test_metrics_and_segments_exist() {
    use googleads_rs::google::ads::googleads::v22::common::{Metrics, Segments};

    let _metrics = Metrics::default();
    let _segments = Segments::default();
}

// ============================================================================
// Test 1.3: Request/Response Types Generated
// ============================================================================

#[test]
fn test_search_request_response_types_exist() {
    use googleads_rs::google::ads::googleads::v22::services::{
        GoogleAdsRow, SearchGoogleAdsStreamRequest, SearchGoogleAdsStreamResponse,
    };

    let _request = SearchGoogleAdsStreamRequest::default();
    let _response = SearchGoogleAdsStreamResponse::default();
    let _row = GoogleAdsRow::default();
}

#[test]
fn test_field_mask_type_exists() {
    use prost_types::FieldMask;

    let field_mask = FieldMask {
        paths: vec!["campaign.id".to_string(), "campaign.name".to_string()],
    };

    assert_eq!(field_mask.paths.len(), 2);
}

// ============================================================================
// Test 1.4: Common Enum Types Generated
// ============================================================================

#[test]
fn test_common_enum_types_exist() {
    use googleads_rs::google::ads::googleads::v22::enums::{
        ad_group_status_enum::AdGroupStatus, advertising_channel_type_enum::AdvertisingChannelType,
        campaign_status_enum::CampaignStatus,
    };

    let _campaign_status = CampaignStatus::Enabled;
    let _ad_group_status = AdGroupStatus::Paused;
    let _channel_type = AdvertisingChannelType::Search;
}
